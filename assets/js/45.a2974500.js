(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{400:function(e,t,s){"use strict";s.r(t);var a=s(42),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"desmos-apollo-testnet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#desmos-apollo-testnet"}},[e._v("#")]),e._v(' Desmos "Apollo" testnet')]),e._v(" "),s("h2",{attrs:{id:"requirements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requirements"}},[e._v("#")]),e._v(" Requirements")]),e._v(" "),s("p",[e._v("In order to follow the below steps, make sure that you meet\nthe "),s("RouterLink",{attrs:{to:"/fullnode/overview.html#Requirements"}},[e._v("hardware requirements")]),e._v(" and you\nhave "),s("RouterLink",{attrs:{to:"/fullnode/overview.html#1-setup-your-environment"}},[e._v("setup your environment")]),e._v(" accordingly. Finally, before starting,\nmake sure you have "),s("RouterLink",{attrs:{to:"/fullnode/setup.html#1-build-the-software"}},[e._v("installed Desmos")]),e._v(".")],1),e._v(" "),s("h2",{attrs:{id:"overview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),s("p",[e._v("In order to make sure that validators know what to do when the mainnet will start, we decided to run a copycat chain\ncalled "),s("em",[e._v('"Apollo"')]),e._v(". We will use it to test the final Desmos codebase as well as to test the coordination between\ndifferent validators and future updates. This testnet will start the same way as the mainnet, using a decentralized\nprocedure made of three different parts:")]),e._v(" "),s("ol",[s("li",[e._v("Creation of genesis transactions by validators.")]),e._v(" "),s("li",[e._v("Collection of all genesis transactions.")]),e._v(" "),s("li",[e._v("Chain start.")])]),e._v(" "),s("p",[e._v("All validators that would like to take part into this testnet from its beginning should participate in this procedure.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("Required Desmos version")]),e._v(" "),s("p",[e._v("Please note that in order to be able to properly run all the below mentioned Desmos commands, you need to have Desmos "),s("code",[e._v("master")]),e._v(" version installed on your machine.\nTo do this, if you already have an older Desmos version installed, you can run the following commands:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /path/to/Desmos\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout master "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])])])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("You can join later")]),e._v(" "),s("p",[e._v("If you do not have time to join our testnet from its beginning you can always join later."),s("br"),e._v("\nIf you wish to know how please read "),s("RouterLink",{attrs:{to:"/testnets/join-public.html"}},[e._v("here")]),e._v(".")],1)]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("Rewards")]),e._v(" "),s("p",[e._v("This testnet is "),s("strong",[e._v("not")]),e._v(" meant to reward the validators that will take part to it directly. This means that we will\n"),s("strong",[e._v("not")]),e._v(" give any DSM to people that will run a validator node. Instead, we will use this testnet as a playground to\nobserve how different validators behave.")])]),e._v(" "),s("h2",{attrs:{id:"join-apollo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join-apollo"}},[e._v("#")]),e._v(' Join "Apollo"')]),e._v(" "),s("p",[e._v('If you are a validator that would like to take part in the genesis of the "Apollo" testnet, all you have to do is:')]),e._v(" "),s("ol",[s("li",[e._v("Download the current genesis file.")]),e._v(" "),s("li",[e._v("Create a genesis transaction.")]),e._v(" "),s("li",[e._v("Submit that genesis transaction to our GitHub repository.")])]),e._v(" "),s("p",[e._v("To perform all these steps you need to have a local wallet stored on your machine. In order to get it, you can generate\none with the following command:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("desmos keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("key_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("p",[e._v("If you instead already have a mnemonic phrase and would like to use that, you can run")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("desmos keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("key_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --recover\n")])])]),s("p",[e._v("Both of those commands will create a local wallet and store it inside your machine in the secure hardware. Once you have\nrun either one of those you are ready to proceed further.")]),e._v(" "),s("h3",{attrs:{id:"_1-download-the-current-genesis-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-download-the-current-genesis-file"}},[e._v("#")]),e._v(" 1. Download the current genesis file")]),e._v(" "),s("p",[e._v('In order to perform a genesis transaction, you first have to download the current genesis file for the "Apollo"\ntestnet. To do so, you have to:')]),e._v(" "),s("ol",[s("li",[e._v("initialize your node;")]),e._v(" "),s("li",[e._v("download the genesis file.")])]),e._v(" "),s("h4",{attrs:{id:"initialize-your-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#initialize-your-node"}},[e._v("#")]),e._v(" Initialize your node")]),e._v(" "),s("p",[e._v("In order to initialize your node appropriately, you can use the "),s("code",[e._v("desmos init")]),e._v(" command:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("desmos init "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("Your moniker"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Generate a deterministic node")]),e._v(" "),s("p",[e._v("We suggest you using the "),s("code",[e._v("--recover")]),e._v(" flag while running the "),s("code",[e._v("desmos init")]),e._v(" command. This will ask you for a seed phrase\nthat will be used to generate the node private key. Doing so will allow you to recover your node private key if\nsomething goes wrong, instead of having to backup the "),s("code",[e._v("priv_validator_key.json")]),e._v(" file by hand.")])]),e._v(" "),s("h4",{attrs:{id:"download-the-genesis-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#download-the-genesis-file"}},[e._v("#")]),e._v(" Download the genesis file")]),e._v(" "),s("p",[e._v('Once you have initialized your node, it is now time to download the current genesis file for the "Apollo" testnet. To do\nso, you can run the following command:')]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" ~/.desmos/config/genesis.json\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" https://raw.githubusercontent.com/desmos-labs/morpheus/master/morpheus-apollo-1/genesis.json "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ~/.desmos/config/genesis.json\n")])])]),s("h3",{attrs:{id:"_2-creating-a-genesis-transaction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-creating-a-genesis-transaction"}},[e._v("#")]),e._v(" 2. Creating a genesis transaction")]),e._v(" "),s("p",[e._v("Genesis transactions are used to create the validator set that will need to be present at genesis block in order to start the chain.\nThis is done by using the "),s("code",[e._v("desmos gentx")]),e._v(" command that allows you to specify the details of your node. Including a genesis transaction in the genesis file is the same as broadcasting a "),s("code",[e._v("desmos tx staking create-validator")]),e._v(" transaction on a live chain.")]),e._v(" "),s("p",[e._v("In order to use this command, however, you need to first have an account inside the genesis file itself. To create such\naccount you can use the "),s("code",[e._v("desmos add-genesis-account")]),e._v(" command:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("desmos add-genesis-account "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your_key"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" 10000000udaric \n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("Amount value")]),e._v(" "),s("p",[e._v("Please do not try giving yourself more than "),s("code",[e._v("10000000udaric")]),e._v(" (equivalent to "),s("code",[e._v("10 Daric")]),e._v("). If you do so, your genesis\ntransaction submission will not be accepted, and you will not be able to take part in the genesis procedure.")])]),e._v(" "),s("p",[e._v("After you have inserted your account inside the genesis file, you are now ready to create your validator node using a\ngenesis transaction:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("desmos gentx "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your_key"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" 1000000udaric --chain-id"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("morpheus-apollo-1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --moniker"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<Your validator moniker>"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --commission-max-change-rate"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.01")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --commission-max-rate"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --commission-rate"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.10")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --details"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"..."')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --security-contact"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"..."')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --website"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"..."')]),e._v("\n")])])]),s("p",[e._v("Once you run this command, the output is going to look something like this:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('Genesis transaction written to "/home/user/.desmos/config/gentx/gentx-6b1fe44615aa1ac9b0dfc637d1a33fd63de2a05e.json"\n')])])]),s("p",[e._v("We're going to refer to that file location as "),s("code",[e._v("/path/to/gentx.json")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"_3-submit-your-genesis-transaction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-submit-your-genesis-transaction"}},[e._v("#")]),e._v(" 3. Submit your genesis transaction")]),e._v(" "),s("p",[e._v("Now that everything is ready, the last step you have to perform is to commit the changed genesis file and the new\ngenesis transaction to our repo.")]),e._v(" "),s("p",[e._v("First thing first, you need to "),s("a",{attrs:{href:"https://docs.github.com/en/github/getting-started-with-github/fork-a-repo",target:"_blank",rel:"noopener noreferrer"}},[e._v("fork"),s("OutboundLink")],1),e._v(" our\n"),s("a",{attrs:{href:"https://github.com/desmos-labs/morpheus",target:"_blank",rel:"noopener noreferrer"}},[e._v("testnet repository"),s("OutboundLink")],1),e._v(". Once you have done so, you can clone your fork with the\nfollowing command:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("Your GitHub username"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/morpheus.git \n")])])]),s("p",[e._v("Now, copy the updated genesis file and the new genesis transaction file inside the proper paths:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" morpheus\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" ~/.desmos/config/genesis.json morpheus-apollo-1/ \n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" /path/to/gentx.json morpheus-apollo-1/gentxs/\n")])])]),s("p",[e._v("Next, add, commit and push the new files to your fork repository:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Your commit message"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push\n")])])]),s("p",[e._v("Finally, "),s("a",{attrs:{href:"https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request",target:"_blank",rel:"noopener noreferrer"}},[e._v("create a pull request"),s("OutboundLink")],1),e._v("\nso that your changes can be merged inside our testnet repository.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("Make sure you pass the automatic checks")]),e._v(" "),s("p",[e._v("When you create a pull request inside our repository, we will perform some automatic checks. These include but are not\nlimited to:")]),e._v(" "),s("ul",[s("li",[e._v("validating the genesis account amount")]),e._v(" "),s("li",[e._v("validating the genesis transaction signature")])]),e._v(" "),s("p",[e._v("If you do not pass all of these checks, we will not merge your pull request. This means you will not be able to have\nyour node inside the final genesis file that will be used to start the chain.")])]),e._v(" "),s("h3",{attrs:{id:"final-remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#final-remarks"}},[e._v("#")]),e._v(" Final remarks")]),e._v(" "),s("p",[e._v('Congratulations, you successfully joined the Morpheus "Apollo" testnet as a genesis validator. All you have to do now is\nwait until the final genesis file is created. Once that\'s done, you will need to download it inside your node and then\nstart the '),s("code",[e._v("desmos")]),e._v(" process.")]),e._v(" "),s("p",[e._v("We highly suggest you to join "),s("a",{attrs:{href:"https://discord.gg/yxPRGdq",target:"_blank",rel:"noopener noreferrer"}},[e._v("our Discord server"),s("OutboundLink")],1),e._v(" so that you can keep updated with all the\nnew information and coordinate with other validator nodes properly.")])])}),[],!1,null,null,null);t.default=o.exports}}]);